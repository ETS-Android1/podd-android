apply plugin: 'com.android.application'

def funfConfig = """
{
    "@type": "edu.mit.media.funf.pipeline.BasicPipeline",
    "name": "default",
    "version": 1,
    "archive": {
        "@schedule": {"interval": ${60 * 60 * 4}}
    },
    "upload": {
        "url": \\"http://apidev.cmonehealth.org/funf/upload/\\",
        "@schedule": {"interval": ${60 * 60 * 12}}
    },
    "update": {
        "url": \\"http://www.cmonehealth.org/funfconfig\\",
        "@schedule": {"interval": ${60 * 60 * 24}}
    },
    "data": [
        {
            "@type": "edu.mit.media.funf.probe.builtin.BatteryProbe",
            "@schedule": {"interval": ${60 * 60 * 2}}
        },
        {
            "@type": "edu.mit.media.funf.probe.builtin.RunningApplicationsProbe",
            "@schedule": {"interval": ${60 * 60 * 4}}
        },
        {
            "@type": "edu.mit.media.funf.probe.builtin.SimpleLocationProbe",
            "@schedule": {"interval": ${60 * 60 * 4}}
        },
        {
            "@type": "edu.mit.media.funf.probe.builtin.HardwareInfoProbe"
        }
    ]

}

"""
android {
    compileSdkVersion 20
    buildToolsVersion "19.1.0"

    defaultConfig {
        applicationId "org.cm.podd.report"
        minSdkVersion 11
        targetSdkVersion 20
        versionCode 9
        versionName "1.0.9"
        buildConfigField "String", "GCM_SERVICE_ID", "\"124985974076\""
        buildConfigField "String", "BUCKET_NAME", "\"podd-dev\""
        resValue "string", "funf_pipeline", funfConfig
    }

    signingConfigs {
        release {
            keyAlias 'podd_report'
            storeFile file('../report.keystore')
            storePassword "xxx"
            keyPassword "yyy"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }

        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        server_test {
            buildConfigField "String", "SERVER_URL", "\"http://apidev.cmonehealth.org\""
        }

        server_production {
            buildConfigField "String", "SERVER_URL", "\"https://api.cmonehealth.org\""
            buildConfigField "String", "BUCKET_NAME", "\"podd\""
            resValue "string", "funf_pipeline", funfConfig.replaceAll("apidev", "api").replaceAll("http://api", "https://api")
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('de.keyboardsurfer.android.widget:crouton:1.8.4@aar') {
        exclude group: 'com.google.android', module: 'support-v4'
    }
    compile 'org.mozilla:rhino:1.7R4'
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.google.android.gms:play-services:6.1.+'
    compile files('libs/aws-android-sdk-2.1.5-core.jar')
    compile files('libs/aws-android-sdk-2.1.5-s3.jar')
    compile files('libs/gson-2.1.jar')
    compile files('libs/funf-0.4.2.jar')
}

task askForPasswords << {
    // Must create String because System.readPassword() returns char[]
    // (and assigning that below fails silently)
    def storePw = new String(System.console().readPassword("Keystore password: "))
    //def keyPw  = new String(System.console().readPassword("Key password: "))

    android.signingConfigs.release.storePassword = storePw
    android.signingConfigs.release.keyPassword = storePw
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageServer_productionRelease") || theTask.name.equals("packageServer_testRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}